# Copyright 2023 The Toucan Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# For 'shell' see https://ninja-build.org/manual.html#ref_rule_command
if (host_os == "win") {
  shell = "cmd.exe /c "
  stamp = "$shell echo >"
} else {
  shell = ""
  stamp = "touch"
}

template("msvc_toolchain") {
  toolchain(target_name) {
    cpu = invoker.cpu
    lib_switch = ""
    lib_dir_switch = "/LIBPATH:"

    bin = "$win_vc/Tools/MSVC/$win_toolchain_version/bin/HostX64/$cpu"

    env_setup = ""
    if (cpu == "x86") {
      # Toolchain asset includes a script that configures for x86 building.
      # We don't support x86 builds with local MSVC installations.
      env_setup = "$shell $win_sdk/bin/SetEnv.cmd /x86 && "
    } else if (cpu == "arm64") {
      # ARM64 compiler is incomplete - it relies on DLLs located in the host toolchain directory.
      env_setup = "$shell set \"PATH=%PATH%;$win_vc\\Tools\\MSVC\\$win_toolchain_version\\bin\\HostX64\\x64\" && "
    }

    cl_m32_flag = ""

    if (clang_win != "") {
      if (cpu == "x86") {
        # cl.exe knows implicitly by the choice of executable that it's targeting
        # x86, but clang-cl.exe needs to be told when targeting non-host
        # platforms. (All our builders are x86-64, so x86 is always non-host.)
        cl_m32_flag = "-m32"
      }
      if (host_os == "win") {
        cl = "\"$clang_win/bin/clang-cl.exe\""
        lib = "\"$clang_win/bin/lld-link.exe\" /lib"
        link = "\"$clang_win/bin/lld-link.exe\""
      } else {
        cl = "\"$clang_win/bin/clang-cl\""
        lib = "\"$clang_win/bin/lld-link\" /lib"
        link = "\"$clang_win/bin/lld-link\""
      }
    } else {
      cl = "\"$bin/cl.exe\""
      lib = "\"$bin/lib.exe\""
      link = "\"$bin/link.exe\""
    }

    tool("asm") {
      _ml = "ml"
      if (cpu == "x64") {
        _ml += "64"
      }
      command = "$env_setup \"$bin/$_ml.exe\" {{asmflags}} /nologo /c /Fo {{output}} {{source}}"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj" ]
      description = "assemble {{source}}"
    }

    tool("cc") {
      precompiled_header_type = "msvc"
      pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"

      # Label names may have spaces so pdbname must be quoted.
      command = "$env_setup $cc_wrapper $cl /nologo /showIncludes /FC {{defines}} {{include_dirs}} {{cflags}} $cl_m32_flag {{cflags_c}} /c {{source}} /Fo{{output}} /Fd\"$pdbname\""
      depsformat = "msvc"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj" ]
      description = "compile {{source}}"
    }

    tool("cxx") {
      precompiled_header_type = "msvc"
      pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"

      # Label names may have spaces so pdbname must be quoted.
      command = "$env_setup $cc_wrapper $cl /nologo /showIncludes /FC {{defines}} {{include_dirs}} {{cflags}} $cl_m32_flag {{cflags_cc}} /c {{source}} /Fo{{output}} /Fd\"$pdbname\""
      depsformat = "msvc"
      outputs =
          [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj" ]
      description = "compile {{source}}"
    }

    tool("alink") {
      rspfile = "{{output}}.rsp"

      command = "$env_setup $lib /nologo /ignore:4221 {{arflags}} /OUT:{{output}} @$rspfile"
      outputs = [
        # Ignore {{output_extension}} and always use .lib, there's no reason to
        # allow targets to override this extension on Windows.
        "{{root_out_dir}}/{{target_output_name}}{{output_extension}}",
      ]
      default_output_extension = ".lib"
      default_output_dir = "{{target_out_dir}}"

      # inputs_newline works around a fixed per-line buffer size in the linker.
      rspfile_content = "{{inputs_newline}}"
      description = "link {{output}}"
    }

    tool("solink") {
      dllname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
      libname = "${dllname}.lib"
      pdbname = "${dllname}.pdb"
      rspfile = "${dllname}.rsp"

      command = "$env_setup $link /nologo /IMPLIB:$libname /DLL /OUT:$dllname /PDB:$pdbname @$rspfile"
      outputs = [
        dllname,
        libname,
        pdbname,
      ]
      default_output_extension = ".dll"
      default_output_dir = "{{root_out_dir}}"

      link_output = libname
      depend_output = libname
      runtime_outputs = [
        dllname,
        pdbname,
      ]

      # I don't quite understand this.  Aping Chrome's toolchain/win/BUILD.gn.
      restat = true

      # inputs_newline works around a fixed per-line buffer size in the linker.
      rspfile_content = "{{inputs_newline}} {{libs}} {{solibs}} {{ldflags}}"
      description = "link {{output}}"
    }

    tool("link") {
      exename = "{{root_out_dir}}/{{target_output_name}}{{output_extension}}"
      pdbname = "$exename.pdb"
      rspfile = "$exename.rsp"

      command = "$env_setup $link /nologo /OUT:$exename /PDB:$pdbname @$rspfile"
      default_output_extension = ".exe"
      default_output_dir = "{{root_out_dir}}"
      outputs = [ exename ]

      # inputs_newline works around a fixed per-line buffer size in the linker.
      rspfile_content = "{{inputs_newline}} {{libs}} {{solibs}} {{ldflags}}"
      description = "link {{output}}"
    }

    tool("stamp") {
      command = "$stamp {{output}}"
      description = "stamp {{output}}"
    }

    tool("copy") {
      cp_py = rebase_path("../cp.py")
      command = "$shell python3 \"$cp_py\" {{source}} {{output}}"
      description = "copy {{source}} {{output}}"
    }

    toolchain_args = {
      current_cpu = invoker.cpu
      current_os = invoker.os
    }
  }
}

template("gcc_like_toolchain") {
  toolchain(target_name) {
    ar = invoker.ar
    cc = invoker.cc
    cxx = invoker.cxx
    link = invoker.link
    default_link_extension = invoker.default_link_extension
    lib_switch = "-l"
    lib_dir_switch = "-L"

    object_subdir = "{{source_out_dir}}/{{label_name}}"

    tool("cc") {
      depfile = "{{output}}.d"
      command = "$cc_wrapper $cc -MD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      outputs = [ "$object_subdir/{{target_output_name}}.{{source_name_part}}.o" ]
      description = "compile {{source}}"
    }

    tool("cxx") {
      depfile = "{{output}}.d"
      command = "$cc_wrapper $cxx -MD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      outputs = [ "$object_subdir/{{target_output_name}}.{{source_name_part}}.o" ]
      description = "compile {{source}}"
    }

    tool("objc") {
      depfile = "{{output}}.d"
      command = "$cc_wrapper $cc -MD -MF $depfile {{defines}} {{include_dirs}} {{framework_dirs}} {{cflags}} {{cflags_objc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      outputs = [ "$object_subdir/{{target_output_name}}.{{source_name_part}}.o" ]
      description = "compile {{source}}"
    }

    tool("objcxx") {
      depfile = "{{output}}.d"
      command = "$cc_wrapper $cxx -MD -MF $depfile {{defines}} {{include_dirs}} {{framework_dirs}} {{cflags}} {{cflags_objcc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      outputs = [ "$object_subdir/{{target_output_name}}.{{source_name_part}}.o" ]
      description = "compile {{source}}"
    }

    tool("asm") {
      depfile = "{{output}}.d"
      command = "$cc_wrapper $cc -MD -MF $depfile {{defines}} {{include_dirs}} {{asmflags}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      outputs = [ "$object_subdir/{{target_output_name}}.{{source_name_part}}.o" ]
      description = "assemble {{source}}"
    }

    if (host_os == "mac") {
      not_needed([ "ar" ])  # We use libtool instead.
    }

    tool("alink") {
      if (host_os == "mac") {
        command = "libtool -static -o {{output}} -no_warning_for_no_symbols {{inputs}}"
      } else {
        rspfile = "{{output}}.rsp"
        rspfile_content = "{{inputs}}"
        rm_py = rebase_path("../rm.py")
        command = "$shell python3 \"$rm_py\" \"{{output}}\" && $ar rcs {{output}} @$rspfile"
      }

      outputs =
          [ "{{root_out_dir}}/{{target_output_name}}{{output_extension}}" ]
      default_output_extension = ".a"
      output_prefix = "lib"
      description = "link {{output}}"
    }

    tool("solink") {
      soname = "{{target_output_name}}{{output_extension}}"

      rpath = "-Wl,-soname,$soname"
      if (host_os == "mac") {
        rpath = "-Wl,-install_name,@rpath/$soname"
      }

      rspfile = "{{output}}.rsp"
      rspfile_content = "{{inputs}}"

      # --start-group/--end-group let us link multiple .a {{inputs}}
      # without worrying about their relative order on the link line.
      #
      # This is mostly important for traditional linkers like GNU ld and Gold.
      # The Mac/iOS linker neither needs nor accepts these flags.
      # LLD doesn't need these flags, but accepts and ignores them.
      _start_group = "-Wl,--start-group"
      _end_group = "-Wl,--end-group"
      if (host_os == "mac") {
        _start_group = ""
        _end_group = ""
      }

      command = "$link -shared {{ldflags}} $_start_group @$rspfile {{frameworks}} {{solibs}} $_end_group {{libs}} $rpath -o {{output}}"
      outputs = [ "{{root_out_dir}}/$soname" ]
      output_prefix = "lib"
      if (host_os == "mac") {
        default_output_extension = ".dylib"
      } else {
        default_output_extension = ".so"
      }
      description = "link {{output}}"
    }

    tool("link") {
      default_output_extension = default_link_extension
      exe_name = "{{root_out_dir}}/{{target_output_name}}{{output_extension}}"
      rspfile = "$exe_name.rsp"
      rspfile_content = "{{inputs}}"

      # --start-group/--end-group let us link multiple .a {{inputs}}
      # without worrying about their relative order on the link line.
      #
      # This is mostly important for traditional linkers like GNU ld and Gold.
      # The Mac/iOS linker neither needs nor accepts these flags.
      # LLD doesn't need these flags, but accepts and ignores them.
      _start_group = "-Wl,--start-group"
      _end_group = "-Wl,--end-group"
      if (host_os == "mac") {
        _start_group = ""
        _end_group = ""
      }
      command = "$link {{ldflags}} $_start_group @$rspfile {{frameworks}} {{solibs}} $_end_group {{libs}} -o $exe_name"

      outputs = [ "$exe_name" ]
      description = "link {{output}}"
    }

    tool("stamp") {
      command = "$stamp {{output}}"
      description = "stamp {{output}}"
    }

    tool("copy") {
      cp_py = rebase_path("../cp.py")
      command = "python3 \"$cp_py\" {{source}} {{output}}"
      description = "copy {{source}} {{output}}"
    }

    tool("copy_bundle_data") {
      cp_py = rebase_path("../cp.py")
      command = "python3 \"$cp_py\" {{source}} {{output}}"
      description = "copy_bundle_data {{source}} {{output}}"
    }

    # We don't currently have any xcasset files so make this a NOP
    tool("compile_xcassets") {
      command = "true"
      description = "compile_xcassets {{output}}"
    }

    toolchain_args = {
      current_cpu = invoker.cpu
      current_os = invoker.os
    }
  }
}

msvc_toolchain("msvc_host") {
  cpu = host_cpu
  os = host_os
}

msvc_toolchain("msvc_target") {
  cpu = target_cpu
  os = target_os
}

gcc_like_toolchain("gcc_like_host") {
  cpu = host_cpu
  os = host_os
  ar = ar
  cc = cc
  cxx = cxx
  link = cxx
  default_link_extension = ""
}

gcc_like_toolchain("gcc_like_target") {
  cpu = target_cpu
  os = target_os
  ar = ar
  cc = cc
  cxx = cxx
  link = cxx
  default_link_extension = ""
}

if (host_os == "win") {
  em_ext = ".bat"
} else {
  em_ext = ""
}

gcc_like_toolchain("wasm") {
  cpu = "wasm"
  os = "wasm"
  ar = "$emscripten_dir/emar${em_ext}"
  cc = "$emscripten_dir/emcc${em_ext}"
  cxx = "$emscripten_dir/em++${em_ext}"
  link = cxx
  default_link_extension = ".html"
}
