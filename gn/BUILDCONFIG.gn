# Copyright 2023 The Toucan Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

declare_args() {
  ndk = ""

  sanitize = ""

  ar = "ar"
  cc = "cc"
  cxx = "c++"
  cc_wrapper = ""

  win_vc = ""
  win_toolchain_version = ""

  win_sdk = "C:/Program Files (x86)/Windows Kits/10"
  win_sdk_version = ""

  emscripten_dir = rebase_path("//third_party/emscripten")

  clang_win = ""

  werror = false
  is_debug = true
  is_component_build = false
}

if (target_os == "") {
  target_os = host_os
}

if (target_cpu == "") {
  target_cpu = host_cpu
}

if (current_os == "") {
  current_os = target_os
}

if (current_cpu == "") {
  current_cpu = target_cpu
}

is_android = current_os == "android"
is_chromeos = false
is_ios = current_os == "ios"
is_linux = current_os == "linux"
is_mac = current_os == "mac"
is_wasm = current_os == "wasm"
is_win = current_os == "win"
is_fuchsia = current_os == "fuchsia"
is_apple = is_ios || is_mac

is_clang = is_android || is_ios || is_mac ||
           (cc == "clang" && cxx == "clang++") || clang_win != ""

default_configs = [ "//gn:default" ]

if (is_debug) {
  default_configs += [ "//gn:debug_symbols" ]
  debug_or_release = "Debug"
} else {
  debug_or_release = "Release"
}

llvm_include_dirs = [ "../third_party/llvm/llvm/include" ]
if (is_win) {
  llvm_include_dirs += [ "../third_party/llvm/llvm/out/include" ]
} else {
  llvm_include_dirs += [ "../third_party/llvm/llvm/out/$debug_or_release/include" ]
}

set_defaults("executable") {
  configs = default_configs
}

set_defaults("source_set") {
  configs = default_configs
}

set_defaults("static_library") {
  configs = default_configs
}

set_defaults("shared_library") {
  configs = default_configs
}

set_defaults("component") {
  configs = default_configs
}

if (host_os == "win") {
  host_toolchain = "//gn/toolchain:msvc_host"
  if (win_vc == "") {
    win_vc = exec_script("//tools/vswhere.py", [], "string")
  }
  if (win_toolchain_version == "") {
    win_toolchain_version = exec_script("//tools/first-dir-entry.py", ["$win_vc/Tools/MSVC"], "string")
  }
  if (win_sdk_version == "") {
    win_sdk_version = exec_script("//tools/first-dir-entry.py", ["$win_sdk/Include"], "string")
  }
} else {
  host_toolchain = "//gn/toolchain:gcc_like_host"
}

if (target_os == "win") {
  set_default_toolchain("//gn/toolchain:msvc_target")
} else if (target_os == "wasm") {
  set_default_toolchain("//gn/toolchain:wasm")
} else {
  set_default_toolchain("//gn/toolchain:gcc_like_target")
}
