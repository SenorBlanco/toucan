// Copyright 2024 The Toucan Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <api.h>  // generated by generate_bindings

#include <android/log.h>
#include <android_native_app_glue.h>

#include <cassert>

#include <webgpu/webgpu_cpp.h>

#include "api_internal.h"

#define LOGV(...) ((void)__android_log_print(ANDROID_LOG_VERBOSE, "Toucan App", __VA_ARGS__))

namespace Toucan {

static int          gNumWindows = 0;
static android_app* gAndroidApp;
static uint32_t     gScreenSize[2];

namespace {

void WaitForMainWindow() {
  while (gAndroidApp->window == nullptr) {
    int                  events;
    void*                data;
    android_poll_source* source = nullptr;
    int ident = ALooper_pollOnce(-1, nullptr, &events, reinterpret_cast<void**>(&source));
    if (source != nullptr) { source->process(gAndroidApp, source); }
  }
}

EventType ToToucanEventType(AInputEvent* inputEvent) {
  int32_t action = AMotionEvent_getAction(inputEvent);
  int32_t flags = action & AMOTION_EVENT_ACTION_MASK;

  switch (flags) {
    case AMOTION_EVENT_ACTION_DOWN: return EventType::TouchStart;
    case AMOTION_EVENT_ACTION_UP: return EventType::TouchEnd;
    default: return EventType::TouchMove;
  }
}

}  // namespace

struct Window {
  Window(ANativeWindow* w) : window(w) {}
  ANativeWindow* window;
  uint32_t       size[2] = {0, 0};
};

Window* Window_Window(const int32_t* position, const uint32_t* size) {
  ANativeWindow* window;
  if (gNumWindows == 0) {
    WaitForMainWindow();
    window = gAndroidApp->window;
  } else {
    // TODO: create a dialog of x, y, width, height
    window = nullptr;
  }
  if (!window) { return nullptr; }
  gNumWindows++;
  return new Window(window);
}

void Window_Destroy(Window* This) { delete This; }

const uint32_t* Window_GetSize(Window* This) {
  This->size[0] = ANativeWindow_getWidth(This->window);
  This->size[1] = ANativeWindow_getHeight(This->window);
  return This->size;
}

Device* Device_Device() {
 wgpu::DeviceDescriptor desc;
  desc.SetUncapturedErrorCallback(
   [](const wgpu::Device&, wgpu::ErrorType type, wgpu::StringView message) {
      LOGV("WebGPU Error:\n%s\n", message.data);
    }
  );

  wgpu::Device device = CreateDawnDevice(wgpu::BackendType::Vulkan, &desc);
  if (!device) { return nullptr; }
  return new Device(device);
}

bool System_IsRunning() { return true; }

bool System_HasPendingEvents() { return AInputQueue_hasEvents(gAndroidApp->inputQueue); }

Event* System_GetNextEvent() {
  Event* event = new Event();
  event->type = EventType::Unknown;
  int                  events;
  void*                data;
  android_poll_source* source = nullptr;
  int          ident = ALooper_pollOnce(-1, nullptr, &events, reinterpret_cast<void**>(&source));
  AInputEvent* inputEvent = NULL;
  if (AInputQueue_getEvent(gAndroidApp->inputQueue, &inputEvent) >= 0) {
    switch (AInputEvent_getType(inputEvent)) {
      case AINPUT_EVENT_TYPE_MOTION:
        event->type = ToToucanEventType(inputEvent);
        event->numTouches =
            std::min(static_cast<int>(AMotionEvent_getPointerCount(inputEvent)), 10);
        for (int i = 0; i < event->numTouches; ++i) {
          event->touches[i][0] = AMotionEvent_getX(inputEvent, i);
          event->touches[i][1] = AMotionEvent_getY(inputEvent, i);
        }
        break;
    }
    AInputQueue_finishEvent(gAndroidApp->inputQueue, inputEvent, 1);
  }
  return event;
}

const uint32_t* System_GetScreenSize() {
  WaitForMainWindow();
  gScreenSize[0] = ANativeWindow_getWidth(gAndroidApp->window);
  gScreenSize[1] = ANativeWindow_getHeight(gAndroidApp->window);
  return gScreenSize;
}

wgpu::TextureFormat GetPreferredSwapChainFormat() { return wgpu::TextureFormat::RGBA8Unorm; }

SwapChain* SwapChain_SwapChain(int qualifiers, Type* format, Device* device, Window* window) {
  wgpu::SurfaceDescriptorFromAndroidNativeWindow awDesc;
  awDesc.window = window->window;
  wgpu::SurfaceDescriptor surfaceDesc;
  surfaceDesc.nextInChain = &awDesc;

  static wgpu::Instance instance = wgpu::CreateInstance({});

  wgpu::Surface surface = instance.CreateSurface(&surfaceDesc);

  wgpu::SurfaceConfiguration config;
  config.device = device->device;
  config.format = ToDawnTextureFormat(format);
  config.width = ANativeWindow_getWidth(window->window);
  config.height = ANativeWindow_getHeight(window->window);
  config.presentMode = wgpu::PresentMode::Fifo;

  surface.Configure(&config);

  return new SwapChain(surface, device->device, {config.width, config.height, 1}, config.format,
                       nullptr);
}

double System_GetCurrentTime() {
  struct timeval now;

  gettimeofday(&now, NULL);
  return static_cast<double>(now.tv_sec) + static_cast<double>(now.tv_usec) / 1000000.0;
}

void SetAndroidApp(struct android_app* app) { gAndroidApp = app; }

};  // namespace Toucan
