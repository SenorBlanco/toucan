// Copyright 2024 The Toucan Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <api.h>  // generated by generate_bindings

#include <android/log.h>
#include <android_native_app_glue.h>

#include <cassert>

#include <dawn/dawn_proc.h>
#include <dawn/native/VulkanBackend.h>

#include <vulkan/vulkan_android.h>

#include "api_internal.h"

#ifdef NDEBUG
#define LOGV(...) ((void)__android_log_print(ANDROID_LOG_VERBOSE, "Toucan App", __VA_ARGS__))
#else
#define LOGV(...) ((void)0)
#endif

namespace Toucan {

static std::unique_ptr<dawn::native::Instance> gNativeInstance;
static wgpu::Instance                          gInstance;
static int                                     gNumWindows = 0;
static android_app*                            gAndroidApp;

wgpu::Device createDevice(wgpu::BackendType type) {
  if (!gNativeInstance) {
    gNativeInstance = std::make_unique<dawn::native::Instance>();
    DawnProcTable backendProcs = dawn::native::GetProcs();
    dawnProcSetProcs(&backendProcs);
  }

  if (!gInstance) {
    wgpu::InstanceDescriptor desc;
    gInstance = wgpu::CreateInstance(&desc);
  }

  for (auto adapter : gNativeInstance->EnumerateAdapters()) {
    wgpu::AdapterProperties properties;
    adapter.GetProperties(&properties);
    if (properties.backendType == type) { return adapter.CreateDevice(); }
  }
  return nullptr;
}

struct Window {
  Window(ANativeWindow* w, Device* d, wgpu::Surface s) : window(w), device(d), surface(s) {}
  ANativeWindow* window;
  Device*        device;
  wgpu::Surface  surface;
};

Window* Window_Window(Device* device, int32_t x, int32_t y, uint32_t width, uint32_t height) {
  ANativeWindow* window;
  if (gNumWindows == 0) {
    while (gAndroidApp->window == nullptr) {
      int                  events;
      void*                data;
      android_poll_source* source = nullptr;
      int ident = ALooper_pollOnce(-1, nullptr, &events, reinterpret_cast<void**>(&source));
      if (source != nullptr) { source->process(gAndroidApp, source); }
    }
    window = gAndroidApp->window;
  } else {
    // TODO: create a dialog of x, y, width, height
    window = nullptr;
  }
  if (!window) { return nullptr; }
  Window* w = nullptr;

  VkInstance vkInstance = dawn::native::vulkan::GetInstance(device->device.Get());
  if (!vkInstance) { return nullptr; }

  VkAndroidSurfaceCreateInfoKHR surfaceCreateInfo;
  memset(&surfaceCreateInfo, 0, sizeof(VkAndroidSurfaceCreateInfoKHR));
  surfaceCreateInfo.sType = VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR;
  surfaceCreateInfo.pNext = nullptr;
  surfaceCreateInfo.flags = 0;
  surfaceCreateInfo.window = window;

  wgpu::SurfaceDescriptorFromAndroidNativeWindow awDesc;
  awDesc.window = window;
  wgpu::SurfaceDescriptor desc;
  desc.nextInChain = &awDesc;
  wgpu::Surface surface = gInstance.CreateSurface(&desc);
  gNumWindows++;
  return new Window(window, device, surface);
}

void Window_Destroy(Window* This) { delete This; }

static void PrintDeviceError(WGPUErrorType, const char* message, void*) {
  printf("Device error: %s\n", message);
}

Device* Device_Device() {
  wgpu::Device device = createDevice(wgpu::BackendType::Vulkan);
  if (!device) { return nullptr; }
  assert(dawn::native::vulkan::GetInstance(device.Get()));
  // TODO: add an error callback/interface to Toucan's Device.
  device.SetUncapturedErrorCallback(PrintDeviceError, nullptr);
  auto funky = new Device(device);
  return funky;
}

bool System_IsRunning() { return true; }

bool System_HasPendingEvents() { return AInputQueue_hasEvents(gAndroidApp->inputQueue); }

Event* System_GetNextEvent() {
  Event* result = new Event();
  result->type = EventType::Unknown;
  int                  events;
  void*                data;
  android_poll_source* source = nullptr;
  int ident = ALooper_pollOnce(-1, nullptr, &events, reinterpret_cast<void**>(&source));
  if (source != nullptr) { source->process(gAndroidApp, source); }
  return result;
}

wgpu::TextureFormat GetPreferredSwapChainFormat() { return wgpu::TextureFormat::RGBA8Unorm; }

SwapChain* SwapChain_SwapChain(int qualifiers, Type* format, Window* window) {
  Device*                   device = window->device;
  wgpu::SwapChainDescriptor desc;
  desc.usage = wgpu::TextureUsage::RenderAttachment;
  desc.format = wgpu::TextureFormat::RGBA8Unorm;
  desc.width = ANativeWindow_getWidth(window->window);
  desc.height = ANativeWindow_getHeight(window->window);
  desc.presentMode = wgpu::PresentMode::Immediate;
  wgpu::SwapChain swapChain = device->device.CreateSwapChain(window->surface, &desc);
  return new SwapChain(swapChain, {desc.width, desc.height, 1}, desc.format, nullptr);
}

double System_GetCurrentTime() {
  struct timeval now;

  gettimeofday(&now, NULL);
  return static_cast<double>(now.tv_sec) + static_cast<double>(now.tv_usec) / 1000000.0;
}

void SetAndroidApp(struct android_app* app) { gAndroidApp = app; }

};  // namespace Toucan
